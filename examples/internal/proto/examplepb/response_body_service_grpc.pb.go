// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package examplepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ResponseBodyServiceClient is the client API for ResponseBodyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ResponseBodyServiceClient interface {
	GetResponseBody(ctx context.Context, in *ResponseBodyIn, opts ...grpc.CallOption) (*ResponseBodyOut, error)
	ListResponseBodies(ctx context.Context, in *ResponseBodyIn, opts ...grpc.CallOption) (*RepeatedResponseBodyOut, error)
	ListResponseStrings(ctx context.Context, in *ResponseBodyIn, opts ...grpc.CallOption) (*RepeatedResponseStrings, error)
	GetResponseBodyStream(ctx context.Context, in *ResponseBodyIn, opts ...grpc.CallOption) (ResponseBodyService_GetResponseBodyStreamClient, error)
}

type responseBodyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewResponseBodyServiceClient(cc grpc.ClientConnInterface) ResponseBodyServiceClient {
	return &responseBodyServiceClient{cc}
}

var responseBodyServiceGetResponseBodyStreamDesc = &grpc.StreamDesc{
	StreamName: "GetResponseBody",
}

func (c *responseBodyServiceClient) GetResponseBody(ctx context.Context, in *ResponseBodyIn, opts ...grpc.CallOption) (*ResponseBodyOut, error) {
	out := new(ResponseBodyOut)
	err := c.cc.Invoke(ctx, "/grpc.gateway.examples.internal.proto.examplepb.ResponseBodyService/GetResponseBody", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var responseBodyServiceListResponseBodiesStreamDesc = &grpc.StreamDesc{
	StreamName: "ListResponseBodies",
}

func (c *responseBodyServiceClient) ListResponseBodies(ctx context.Context, in *ResponseBodyIn, opts ...grpc.CallOption) (*RepeatedResponseBodyOut, error) {
	out := new(RepeatedResponseBodyOut)
	err := c.cc.Invoke(ctx, "/grpc.gateway.examples.internal.proto.examplepb.ResponseBodyService/ListResponseBodies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var responseBodyServiceListResponseStringsStreamDesc = &grpc.StreamDesc{
	StreamName: "ListResponseStrings",
}

func (c *responseBodyServiceClient) ListResponseStrings(ctx context.Context, in *ResponseBodyIn, opts ...grpc.CallOption) (*RepeatedResponseStrings, error) {
	out := new(RepeatedResponseStrings)
	err := c.cc.Invoke(ctx, "/grpc.gateway.examples.internal.proto.examplepb.ResponseBodyService/ListResponseStrings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var responseBodyServiceGetResponseBodyStreamStreamDesc = &grpc.StreamDesc{
	StreamName:    "GetResponseBodyStream",
	ServerStreams: true,
}

func (c *responseBodyServiceClient) GetResponseBodyStream(ctx context.Context, in *ResponseBodyIn, opts ...grpc.CallOption) (ResponseBodyService_GetResponseBodyStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, responseBodyServiceGetResponseBodyStreamStreamDesc, "/grpc.gateway.examples.internal.proto.examplepb.ResponseBodyService/GetResponseBodyStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &responseBodyServiceGetResponseBodyStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ResponseBodyService_GetResponseBodyStreamClient interface {
	Recv() (*ResponseBodyOut, error)
	grpc.ClientStream
}

type responseBodyServiceGetResponseBodyStreamClient struct {
	grpc.ClientStream
}

func (x *responseBodyServiceGetResponseBodyStreamClient) Recv() (*ResponseBodyOut, error) {
	m := new(ResponseBodyOut)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ResponseBodyServiceService is the service API for ResponseBodyService service.
// Fields should be assigned to their respective handler implementations only before
// RegisterResponseBodyServiceService is called.  Any unassigned fields will result in the
// handler for that method returning an Unimplemented error.
type ResponseBodyServiceService struct {
	GetResponseBody       func(context.Context, *ResponseBodyIn) (*ResponseBodyOut, error)
	ListResponseBodies    func(context.Context, *ResponseBodyIn) (*RepeatedResponseBodyOut, error)
	ListResponseStrings   func(context.Context, *ResponseBodyIn) (*RepeatedResponseStrings, error)
	GetResponseBodyStream func(*ResponseBodyIn, ResponseBodyService_GetResponseBodyStreamServer) error
}

func (s *ResponseBodyServiceService) getResponseBody(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResponseBodyIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.GetResponseBody(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/grpc.gateway.examples.internal.proto.examplepb.ResponseBodyService/GetResponseBody",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetResponseBody(ctx, req.(*ResponseBodyIn))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *ResponseBodyServiceService) listResponseBodies(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResponseBodyIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.ListResponseBodies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/grpc.gateway.examples.internal.proto.examplepb.ResponseBodyService/ListResponseBodies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.ListResponseBodies(ctx, req.(*ResponseBodyIn))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *ResponseBodyServiceService) listResponseStrings(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResponseBodyIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.ListResponseStrings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/grpc.gateway.examples.internal.proto.examplepb.ResponseBodyService/ListResponseStrings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.ListResponseStrings(ctx, req.(*ResponseBodyIn))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *ResponseBodyServiceService) getResponseBodyStream(_ interface{}, stream grpc.ServerStream) error {
	m := new(ResponseBodyIn)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return s.GetResponseBodyStream(m, &responseBodyServiceGetResponseBodyStreamServer{stream})
}

type ResponseBodyService_GetResponseBodyStreamServer interface {
	Send(*ResponseBodyOut) error
	grpc.ServerStream
}

type responseBodyServiceGetResponseBodyStreamServer struct {
	grpc.ServerStream
}

func (x *responseBodyServiceGetResponseBodyStreamServer) Send(m *ResponseBodyOut) error {
	return x.ServerStream.SendMsg(m)
}

// RegisterResponseBodyServiceService registers a service implementation with a gRPC server.
func RegisterResponseBodyServiceService(s grpc.ServiceRegistrar, srv *ResponseBodyServiceService) {
	srvCopy := *srv
	if srvCopy.GetResponseBody == nil {
		srvCopy.GetResponseBody = func(context.Context, *ResponseBodyIn) (*ResponseBodyOut, error) {
			return nil, status.Errorf(codes.Unimplemented, "method GetResponseBody not implemented")
		}
	}
	if srvCopy.ListResponseBodies == nil {
		srvCopy.ListResponseBodies = func(context.Context, *ResponseBodyIn) (*RepeatedResponseBodyOut, error) {
			return nil, status.Errorf(codes.Unimplemented, "method ListResponseBodies not implemented")
		}
	}
	if srvCopy.ListResponseStrings == nil {
		srvCopy.ListResponseStrings = func(context.Context, *ResponseBodyIn) (*RepeatedResponseStrings, error) {
			return nil, status.Errorf(codes.Unimplemented, "method ListResponseStrings not implemented")
		}
	}
	if srvCopy.GetResponseBodyStream == nil {
		srvCopy.GetResponseBodyStream = func(*ResponseBodyIn, ResponseBodyService_GetResponseBodyStreamServer) error {
			return status.Errorf(codes.Unimplemented, "method GetResponseBodyStream not implemented")
		}
	}
	sd := grpc.ServiceDesc{
		ServiceName: "grpc.gateway.examples.internal.proto.examplepb.ResponseBodyService",
		Methods: []grpc.MethodDesc{
			{
				MethodName: "GetResponseBody",
				Handler:    srvCopy.getResponseBody,
			},
			{
				MethodName: "ListResponseBodies",
				Handler:    srvCopy.listResponseBodies,
			},
			{
				MethodName: "ListResponseStrings",
				Handler:    srvCopy.listResponseStrings,
			},
		},
		Streams: []grpc.StreamDesc{
			{
				StreamName:    "GetResponseBodyStream",
				Handler:       srvCopy.getResponseBodyStream,
				ServerStreams: true,
			},
		},
		Metadata: "examples/internal/proto/examplepb/response_body_service.proto",
	}

	s.RegisterService(&sd, nil)
}

// NewResponseBodyServiceService creates a new ResponseBodyServiceService containing the
// implemented methods of the ResponseBodyService service in s.  Any unimplemented
// methods will result in the gRPC server returning an UNIMPLEMENTED status to the client.
// This includes situations where the method handler is misspelled or has the wrong
// signature.  For this reason, this function should be used with great care and
// is not recommended to be used by most users.
func NewResponseBodyServiceService(s interface{}) *ResponseBodyServiceService {
	ns := &ResponseBodyServiceService{}
	if h, ok := s.(interface {
		GetResponseBody(context.Context, *ResponseBodyIn) (*ResponseBodyOut, error)
	}); ok {
		ns.GetResponseBody = h.GetResponseBody
	}
	if h, ok := s.(interface {
		ListResponseBodies(context.Context, *ResponseBodyIn) (*RepeatedResponseBodyOut, error)
	}); ok {
		ns.ListResponseBodies = h.ListResponseBodies
	}
	if h, ok := s.(interface {
		ListResponseStrings(context.Context, *ResponseBodyIn) (*RepeatedResponseStrings, error)
	}); ok {
		ns.ListResponseStrings = h.ListResponseStrings
	}
	if h, ok := s.(interface {
		GetResponseBodyStream(*ResponseBodyIn, ResponseBodyService_GetResponseBodyStreamServer) error
	}); ok {
		ns.GetResponseBodyStream = h.GetResponseBodyStream
	}
	return ns
}

// UnstableResponseBodyServiceService is the service API for ResponseBodyService service.
// New methods may be added to this interface if they are added to the service
// definition, which is not a backward-compatible change.  For this reason,
// use of this type is not recommended.
type UnstableResponseBodyServiceService interface {
	GetResponseBody(context.Context, *ResponseBodyIn) (*ResponseBodyOut, error)
	ListResponseBodies(context.Context, *ResponseBodyIn) (*RepeatedResponseBodyOut, error)
	ListResponseStrings(context.Context, *ResponseBodyIn) (*RepeatedResponseStrings, error)
	GetResponseBodyStream(*ResponseBodyIn, ResponseBodyService_GetResponseBodyStreamServer) error
}
