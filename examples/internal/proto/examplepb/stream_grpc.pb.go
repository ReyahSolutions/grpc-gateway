// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package examplepb

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	sub "github.com/grpc-ecosystem/grpc-gateway/v2/examples/internal/proto/sub"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// StreamServiceClient is the client API for StreamService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamServiceClient interface {
	BulkCreate(ctx context.Context, opts ...grpc.CallOption) (StreamService_BulkCreateClient, error)
	List(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (StreamService_ListClient, error)
	BulkEcho(ctx context.Context, opts ...grpc.CallOption) (StreamService_BulkEchoClient, error)
	Download(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (StreamService_DownloadClient, error)
}

type streamServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamServiceClient(cc grpc.ClientConnInterface) StreamServiceClient {
	return &streamServiceClient{cc}
}

var streamServiceBulkCreateStreamDesc = &grpc.StreamDesc{
	StreamName:    "BulkCreate",
	ClientStreams: true,
}

func (c *streamServiceClient) BulkCreate(ctx context.Context, opts ...grpc.CallOption) (StreamService_BulkCreateClient, error) {
	stream, err := c.cc.NewStream(ctx, streamServiceBulkCreateStreamDesc, "/grpc.gateway.examples.internal.proto.examplepb.StreamService/BulkCreate", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamServiceBulkCreateClient{stream}
	return x, nil
}

type StreamService_BulkCreateClient interface {
	Send(*ABitOfEverything) error
	CloseAndRecv() (*empty.Empty, error)
	grpc.ClientStream
}

type streamServiceBulkCreateClient struct {
	grpc.ClientStream
}

func (x *streamServiceBulkCreateClient) Send(m *ABitOfEverything) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamServiceBulkCreateClient) CloseAndRecv() (*empty.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var streamServiceListStreamDesc = &grpc.StreamDesc{
	StreamName:    "List",
	ServerStreams: true,
}

func (c *streamServiceClient) List(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (StreamService_ListClient, error) {
	stream, err := c.cc.NewStream(ctx, streamServiceListStreamDesc, "/grpc.gateway.examples.internal.proto.examplepb.StreamService/List", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamServiceListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StreamService_ListClient interface {
	Recv() (*ABitOfEverything, error)
	grpc.ClientStream
}

type streamServiceListClient struct {
	grpc.ClientStream
}

func (x *streamServiceListClient) Recv() (*ABitOfEverything, error) {
	m := new(ABitOfEverything)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var streamServiceBulkEchoStreamDesc = &grpc.StreamDesc{
	StreamName:    "BulkEcho",
	ServerStreams: true,
	ClientStreams: true,
}

func (c *streamServiceClient) BulkEcho(ctx context.Context, opts ...grpc.CallOption) (StreamService_BulkEchoClient, error) {
	stream, err := c.cc.NewStream(ctx, streamServiceBulkEchoStreamDesc, "/grpc.gateway.examples.internal.proto.examplepb.StreamService/BulkEcho", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamServiceBulkEchoClient{stream}
	return x, nil
}

type StreamService_BulkEchoClient interface {
	Send(*sub.StringMessage) error
	Recv() (*sub.StringMessage, error)
	grpc.ClientStream
}

type streamServiceBulkEchoClient struct {
	grpc.ClientStream
}

func (x *streamServiceBulkEchoClient) Send(m *sub.StringMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamServiceBulkEchoClient) Recv() (*sub.StringMessage, error) {
	m := new(sub.StringMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var streamServiceDownloadStreamDesc = &grpc.StreamDesc{
	StreamName:    "Download",
	ServerStreams: true,
}

func (c *streamServiceClient) Download(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (StreamService_DownloadClient, error) {
	stream, err := c.cc.NewStream(ctx, streamServiceDownloadStreamDesc, "/grpc.gateway.examples.internal.proto.examplepb.StreamService/Download", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamServiceDownloadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StreamService_DownloadClient interface {
	Recv() (*httpbody.HttpBody, error)
	grpc.ClientStream
}

type streamServiceDownloadClient struct {
	grpc.ClientStream
}

func (x *streamServiceDownloadClient) Recv() (*httpbody.HttpBody, error) {
	m := new(httpbody.HttpBody)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamServiceService is the service API for StreamService service.
// Fields should be assigned to their respective handler implementations only before
// RegisterStreamServiceService is called.  Any unassigned fields will result in the
// handler for that method returning an Unimplemented error.
type StreamServiceService struct {
	BulkCreate func(StreamService_BulkCreateServer) error
	List       func(*empty.Empty, StreamService_ListServer) error
	BulkEcho   func(StreamService_BulkEchoServer) error
	Download   func(*empty.Empty, StreamService_DownloadServer) error
}

func (s *StreamServiceService) bulkCreate(_ interface{}, stream grpc.ServerStream) error {
	return s.BulkCreate(&streamServiceBulkCreateServer{stream})
}
func (s *StreamServiceService) list(_ interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return s.List(m, &streamServiceListServer{stream})
}
func (s *StreamServiceService) bulkEcho(_ interface{}, stream grpc.ServerStream) error {
	return s.BulkEcho(&streamServiceBulkEchoServer{stream})
}
func (s *StreamServiceService) download(_ interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return s.Download(m, &streamServiceDownloadServer{stream})
}

type StreamService_BulkCreateServer interface {
	SendAndClose(*empty.Empty) error
	Recv() (*ABitOfEverything, error)
	grpc.ServerStream
}

type streamServiceBulkCreateServer struct {
	grpc.ServerStream
}

func (x *streamServiceBulkCreateServer) SendAndClose(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamServiceBulkCreateServer) Recv() (*ABitOfEverything, error) {
	m := new(ABitOfEverything)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

type StreamService_ListServer interface {
	Send(*ABitOfEverything) error
	grpc.ServerStream
}

type streamServiceListServer struct {
	grpc.ServerStream
}

func (x *streamServiceListServer) Send(m *ABitOfEverything) error {
	return x.ServerStream.SendMsg(m)
}

type StreamService_BulkEchoServer interface {
	Send(*sub.StringMessage) error
	Recv() (*sub.StringMessage, error)
	grpc.ServerStream
}

type streamServiceBulkEchoServer struct {
	grpc.ServerStream
}

func (x *streamServiceBulkEchoServer) Send(m *sub.StringMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamServiceBulkEchoServer) Recv() (*sub.StringMessage, error) {
	m := new(sub.StringMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

type StreamService_DownloadServer interface {
	Send(*httpbody.HttpBody) error
	grpc.ServerStream
}

type streamServiceDownloadServer struct {
	grpc.ServerStream
}

func (x *streamServiceDownloadServer) Send(m *httpbody.HttpBody) error {
	return x.ServerStream.SendMsg(m)
}

// RegisterStreamServiceService registers a service implementation with a gRPC server.
func RegisterStreamServiceService(s grpc.ServiceRegistrar, srv *StreamServiceService) {
	srvCopy := *srv
	if srvCopy.BulkCreate == nil {
		srvCopy.BulkCreate = func(StreamService_BulkCreateServer) error {
			return status.Errorf(codes.Unimplemented, "method BulkCreate not implemented")
		}
	}
	if srvCopy.List == nil {
		srvCopy.List = func(*empty.Empty, StreamService_ListServer) error {
			return status.Errorf(codes.Unimplemented, "method List not implemented")
		}
	}
	if srvCopy.BulkEcho == nil {
		srvCopy.BulkEcho = func(StreamService_BulkEchoServer) error {
			return status.Errorf(codes.Unimplemented, "method BulkEcho not implemented")
		}
	}
	if srvCopy.Download == nil {
		srvCopy.Download = func(*empty.Empty, StreamService_DownloadServer) error {
			return status.Errorf(codes.Unimplemented, "method Download not implemented")
		}
	}
	sd := grpc.ServiceDesc{
		ServiceName: "grpc.gateway.examples.internal.proto.examplepb.StreamService",
		Methods:     []grpc.MethodDesc{},
		Streams: []grpc.StreamDesc{
			{
				StreamName:    "BulkCreate",
				Handler:       srvCopy.bulkCreate,
				ClientStreams: true,
			},
			{
				StreamName:    "List",
				Handler:       srvCopy.list,
				ServerStreams: true,
			},
			{
				StreamName:    "BulkEcho",
				Handler:       srvCopy.bulkEcho,
				ServerStreams: true,
				ClientStreams: true,
			},
			{
				StreamName:    "Download",
				Handler:       srvCopy.download,
				ServerStreams: true,
			},
		},
		Metadata: "examples/internal/proto/examplepb/stream.proto",
	}

	s.RegisterService(&sd, nil)
}

// NewStreamServiceService creates a new StreamServiceService containing the
// implemented methods of the StreamService service in s.  Any unimplemented
// methods will result in the gRPC server returning an UNIMPLEMENTED status to the client.
// This includes situations where the method handler is misspelled or has the wrong
// signature.  For this reason, this function should be used with great care and
// is not recommended to be used by most users.
func NewStreamServiceService(s interface{}) *StreamServiceService {
	ns := &StreamServiceService{}
	if h, ok := s.(interface {
		BulkCreate(StreamService_BulkCreateServer) error
	}); ok {
		ns.BulkCreate = h.BulkCreate
	}
	if h, ok := s.(interface {
		List(*empty.Empty, StreamService_ListServer) error
	}); ok {
		ns.List = h.List
	}
	if h, ok := s.(interface {
		BulkEcho(StreamService_BulkEchoServer) error
	}); ok {
		ns.BulkEcho = h.BulkEcho
	}
	if h, ok := s.(interface {
		Download(*empty.Empty, StreamService_DownloadServer) error
	}); ok {
		ns.Download = h.Download
	}
	return ns
}

// UnstableStreamServiceService is the service API for StreamService service.
// New methods may be added to this interface if they are added to the service
// definition, which is not a backward-compatible change.  For this reason,
// use of this type is not recommended.
type UnstableStreamServiceService interface {
	BulkCreate(StreamService_BulkCreateServer) error
	List(*empty.Empty, StreamService_ListServer) error
	BulkEcho(StreamService_BulkEchoServer) error
	Download(*empty.Empty, StreamService_DownloadServer) error
}
