// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package examplepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// NonStandardServiceClient is the client API for NonStandardService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NonStandardServiceClient interface {
	// Apply field mask to empty NonStandardMessage and return result.
	Update(ctx context.Context, in *NonStandardUpdateRequest, opts ...grpc.CallOption) (*NonStandardMessage, error)
	// Apply field mask to empty NonStandardMessageWithJSONNames and return result.
	UpdateWithJSONNames(ctx context.Context, in *NonStandardWithJSONNamesUpdateRequest, opts ...grpc.CallOption) (*NonStandardMessageWithJSONNames, error)
}

type nonStandardServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNonStandardServiceClient(cc grpc.ClientConnInterface) NonStandardServiceClient {
	return &nonStandardServiceClient{cc}
}

var nonStandardServiceUpdateStreamDesc = &grpc.StreamDesc{
	StreamName: "Update",
}

func (c *nonStandardServiceClient) Update(ctx context.Context, in *NonStandardUpdateRequest, opts ...grpc.CallOption) (*NonStandardMessage, error) {
	out := new(NonStandardMessage)
	err := c.cc.Invoke(ctx, "/grpc.gateway.examples.internal.proto.examplepb.NonStandardService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var nonStandardServiceUpdateWithJSONNamesStreamDesc = &grpc.StreamDesc{
	StreamName: "UpdateWithJSONNames",
}

func (c *nonStandardServiceClient) UpdateWithJSONNames(ctx context.Context, in *NonStandardWithJSONNamesUpdateRequest, opts ...grpc.CallOption) (*NonStandardMessageWithJSONNames, error) {
	out := new(NonStandardMessageWithJSONNames)
	err := c.cc.Invoke(ctx, "/grpc.gateway.examples.internal.proto.examplepb.NonStandardService/UpdateWithJSONNames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NonStandardServiceService is the service API for NonStandardService service.
// Fields should be assigned to their respective handler implementations only before
// RegisterNonStandardServiceService is called.  Any unassigned fields will result in the
// handler for that method returning an Unimplemented error.
type NonStandardServiceService struct {
	// Apply field mask to empty NonStandardMessage and return result.
	Update func(context.Context, *NonStandardUpdateRequest) (*NonStandardMessage, error)
	// Apply field mask to empty NonStandardMessageWithJSONNames and return result.
	UpdateWithJSONNames func(context.Context, *NonStandardWithJSONNamesUpdateRequest) (*NonStandardMessageWithJSONNames, error)
}

func (s *NonStandardServiceService) update(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NonStandardUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/grpc.gateway.examples.internal.proto.examplepb.NonStandardService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.Update(ctx, req.(*NonStandardUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *NonStandardServiceService) updateWithJSONNames(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NonStandardWithJSONNamesUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.UpdateWithJSONNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/grpc.gateway.examples.internal.proto.examplepb.NonStandardService/UpdateWithJSONNames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.UpdateWithJSONNames(ctx, req.(*NonStandardWithJSONNamesUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RegisterNonStandardServiceService registers a service implementation with a gRPC server.
func RegisterNonStandardServiceService(s grpc.ServiceRegistrar, srv *NonStandardServiceService) {
	srvCopy := *srv
	if srvCopy.Update == nil {
		srvCopy.Update = func(context.Context, *NonStandardUpdateRequest) (*NonStandardMessage, error) {
			return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
		}
	}
	if srvCopy.UpdateWithJSONNames == nil {
		srvCopy.UpdateWithJSONNames = func(context.Context, *NonStandardWithJSONNamesUpdateRequest) (*NonStandardMessageWithJSONNames, error) {
			return nil, status.Errorf(codes.Unimplemented, "method UpdateWithJSONNames not implemented")
		}
	}
	sd := grpc.ServiceDesc{
		ServiceName: "grpc.gateway.examples.internal.proto.examplepb.NonStandardService",
		Methods: []grpc.MethodDesc{
			{
				MethodName: "Update",
				Handler:    srvCopy.update,
			},
			{
				MethodName: "UpdateWithJSONNames",
				Handler:    srvCopy.updateWithJSONNames,
			},
		},
		Streams:  []grpc.StreamDesc{},
		Metadata: "examples/internal/proto/examplepb/non_standard_names.proto",
	}

	s.RegisterService(&sd, nil)
}

// NewNonStandardServiceService creates a new NonStandardServiceService containing the
// implemented methods of the NonStandardService service in s.  Any unimplemented
// methods will result in the gRPC server returning an UNIMPLEMENTED status to the client.
// This includes situations where the method handler is misspelled or has the wrong
// signature.  For this reason, this function should be used with great care and
// is not recommended to be used by most users.
func NewNonStandardServiceService(s interface{}) *NonStandardServiceService {
	ns := &NonStandardServiceService{}
	if h, ok := s.(interface {
		Update(context.Context, *NonStandardUpdateRequest) (*NonStandardMessage, error)
	}); ok {
		ns.Update = h.Update
	}
	if h, ok := s.(interface {
		UpdateWithJSONNames(context.Context, *NonStandardWithJSONNamesUpdateRequest) (*NonStandardMessageWithJSONNames, error)
	}); ok {
		ns.UpdateWithJSONNames = h.UpdateWithJSONNames
	}
	return ns
}

// UnstableNonStandardServiceService is the service API for NonStandardService service.
// New methods may be added to this interface if they are added to the service
// definition, which is not a backward-compatible change.  For this reason,
// use of this type is not recommended.
type UnstableNonStandardServiceService interface {
	// Apply field mask to empty NonStandardMessage and return result.
	Update(context.Context, *NonStandardUpdateRequest) (*NonStandardMessage, error)
	// Apply field mask to empty NonStandardMessageWithJSONNames and return result.
	UpdateWithJSONNames(context.Context, *NonStandardWithJSONNamesUpdateRequest) (*NonStandardMessageWithJSONNames, error)
}
